#액션의 이름을 정의한다. 
#'backend CI'라는 이름으로 표시된다.
name: backend CI

#백엔드 관련 파일의 push 이벤트나 pull request 이벤트, 
#그리고 수동으로 workflow를 실행하려는 경우(on workflow_dispatch)에 workflow가 실행되도록 설정한다.
on:
  push:
    branches: [ "develop", "main", "release" ]
  pull_request:
    branches: [ "develop", "main", "release" ]
  workflow_dispatch:

#이 workflow에 리포지토리에 대한 읽기 권한을 부여한다.
permissions:
  contents: read

#이 작업을 최신 Ubuntu 환경에서 실행한다.
jobs:
  build:
    runs-on: ubuntu-latest

		#SSH 키의 private key를 설정하여 비공개 서브모듈에 접근할 수 있도록 한다. 
		#이 SSH 키는 GitHub Secrets에 설정하고, base64로 디코딩한다. <- 안 해도 되긴 한다.
    steps:
      - name: Setup SSH key to access private submodule
        run: |
          mkdir -p ~/.ssh
          echo '${{ secrets.BACKEND_CONFIG_PRIVATE_KEY }}' > ~/.ssh/id_rsa
          chmod 400 ~/.ssh/id_rsa
		#리포지토리로 체크아웃을 진행하고 서브모듈을 참조하여 clone한다.
      - name: Checkout
        uses: actions/checkout@v3
        with:
            submodule: true
		#submodule의 내용을 update한다.
      - name: Update config submodule
        run: |
          git submodule update --init
		#컨테이너에서 Corretto JDK를 사용하도록 설정한다.
      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
            java-version: "17"
            distribution: "corretto"
		#backend 디렉토리로 이동하여 Gradle 빌드를 실행한다.
		#위에서 gradle.build에서 backend_config을 가져오도로 설정했으므로, 환경변수가 반영되어 빌드된다.
      - name: Build with Gradle
        run: |
          cd backend
          chmod +x gradlew
          ./gradlew build
        shell: bash
